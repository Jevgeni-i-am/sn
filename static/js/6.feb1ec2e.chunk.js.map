{"version":3,"sources":["components/common/FormControls/FormsControls.module.css","hoc/withAuthRedirect.js","components/Profile/MyPosts/MyPosts.module.css","utils/validators/validators.js","components/common/FormControls/FormsControls.js","components/common/FormControls/Forms-redux.js","components/Main/Dialogs/Dialogs.module.css","components/Main/Dialogs/DialogItem/DialogItem.jsx","components/Main/Dialogs/Message/Message.jsx","components/Main/Dialogs/Dialogs.jsx","components/Main/Dialogs/DialogsContainer.jsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","required","value","maxLengthCreator","maxLength","length","FormControl","input","meta","touched","error","children","hasError","className","css","formControl","Textarea","restProps","child","Input","maxLengthPost","maxLengthMsg","createField","placeholder","name","component","validators","text","Field","validate","AddNewPostFormRedux","reduxForm","form","handleSubmit","onSubmit","button","LoginReduxForm","type","cssForm","formSummaryError","AddMessageFormRedux","DialogItem","activeLink","id","di","Message","m","messages","Dialogs","messagesPage","dialogItemName","newMessageBody","dialogs","map","d","key","messagesElements","mid","message","messageMainPageGridArea","values","sendMessage","compose","dispatch","sendMessageCreator"],"mappings":"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","file":"static/js/6.feb1ec2e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__Xemx7\",\"error\":\"FormsControls_error__4coLq\",\"formSummaryError\":\"FormsControls_formSummaryError__1clvm\"};","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to={\"/login/\"}/>\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n    return ConnectedAuthRedirectComponent\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"MyPosts_item__2FGtP\",\"postBlock\":\"MyPosts_postBlock__3Tex3\",\"posts\":\"MyPosts_posts__2Wu_O\"};","export const required = value => {\r\n    if (value) return undefined;\r\n    return \"Field is required\"\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value.length > maxLength) return `Max lenght is ${maxLength} symbols `;\r\n    return undefined;\r\n}","import React from \"react\";\r\nimport css from \"./FormsControls.module.css\"\r\n\r\nconst FormControl = ({input, meta:{touched, error}, children}) => {\r\n    const hasError = touched && error;\r\n    //Деструктуризируем инпут и пропс,\r\n    //т.к. тут уже нет инпут и пропс\r\n    return (\r\n        <div className={css.formControl + \" \" + (hasError ? css.error : \" \")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\n//REST OPERATOR\r\n// достаём деструктуризацией input & meta\r\n// и оставляем всё оставшееся в пропсах\r\n// Пропсы содержат всё кроме инпута и меты\r\n\r\nexport const Textarea = (props) => {\r\n    const {input, meta, child, ...restProps} = props;\r\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input = (props) => {\r\n    const {input, meta, child, ...restProps} = props;\r\n    return <FormControl {...props}><input {...input}{...restProps}/></FormControl>\r\n}","import {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport css from \"../../Profile/MyPosts/MyPosts.module.css\";\r\nimport cssForm from \"./FormsControls.module.css\";\r\nimport React from \"react\";\r\nimport {Input, Textarea} from \"./FormsControls\";\r\n\r\n//Валидатор не срабатывает, если он передан непосредственно в тело Field.\r\n// Необходимо обозначить валидатор в файле, как тут\r\n\r\n\r\nlet maxLengthPost = maxLengthCreator(10);\r\nlet maxLengthMsg = maxLengthCreator(20);\r\n\r\n\r\n//------- PROFILE PAGE -------\r\nconst AddNewPostForm = ({handleSubmit}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field name={\"newPostText\"} component={Textarea}\r\n                       validate={[required, maxLengthPost]}/>\r\n            </div>\r\n            <div>\r\n                <button className={css.button}> Add post</button>\r\n            </div>\r\n        </form>)\r\n}\r\n\r\n//------- LOGIN PAGE -------\r\nconst LoginForm = ({handleSubmit, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField(\"Email\", \"email\", Input, [required], \"\", \"Login\")}\r\n            {createField(\"Password\", \"password\", Input, [required], {type: \"password\"}, \"Password\")}\r\n            {createField(null, \"rememberMe\", Input, null, {type: \"checkbox\"}, \"Remember me\")}\r\n            {error && <div className={cssForm.formSummaryError}>{error}</div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>)\r\n}\r\n\r\n//------- MESSAGE PAGE -------\r\nconst AddMessageForm = ({handleSubmit}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name=\"newMessageBody\"\r\n                       placeholder=\"Enter your message\"\r\n                       validate={[required, maxLengthMsg]}/>\r\n            </div>\r\n            <div>\r\n                <button className={css.button}>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n//Helper - Login Page form\r\nconst createField = (placeholder, name, component, validators, props = {}, text = \"\") => (\r\n    <div> {text} <Field placeholder={placeholder} name={name} component={component} validate={validators} {...props}/></div>)\r\n\r\n//a unique name for the form\r\nexport const AddNewPostFormRedux = reduxForm({form: \"ProfileAddNewPostForm\"})(AddNewPostForm)\r\nexport const LoginReduxForm = reduxForm({form: \"Login\"})(LoginForm)\r\nexport const AddMessageFormRedux = reduxForm({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messageMainPageGridArea\":\"Dialogs_messageMainPageGridArea__4VpKh\",\"m\":\"Dialogs_m__3E_Xs\",\"text\":\"Dialogs_text__1fiEX\"};","import React from \"react\";\r\nimport css from \"./../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nconst DialogItem = (props) => {\r\n//номер ID в линке\r\n    let activeLink = \"/dialogs/\" + props.id;\r\n\r\n    return (\r\n\r\n        <div className={css.di} >\r\n            <NavLink to={activeLink}>\r\n\r\n                <p>\r\n                    {props.name}\r\n                </p>\r\n            </NavLink>\r\n        </div>\r\n\r\n\r\n    )\r\n}\r\nexport default DialogItem;\r\n","import React from 'react';\r\nimport css from \"../Dialogs.module.css\";\r\n\r\n\r\nconst Message = (props) => {\r\n\r\n    return (\r\n        <div className={css.m}>\r\n            <div>\r\n                <span>Сообщение #{props.id}</span>\r\n            </div>\r\n            <div>\r\n                <span> Текст: {props.messages}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default Message;","import React from \"react\"\r\nimport DialogItem from \"./DialogItem/DialogItem\"\r\nimport css from \"./Dialogs.module.css\";\r\nimport Message from \"./Message/Message\";\r\nimport {AddMessageFormRedux} from \"../../common/FormControls/Forms-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\nconst Dialogs = (props) => {\r\n    let state = props.messagesPage;\r\n    let newMessageBody = state.newMessageBody;\r\n\r\n    let dialogItemName = state.dialogs.map(d =>\r\n        <DialogItem id={d.id} name={d.name} key={d.id}/>);\r\n\r\n    let messagesElements = state.messages.map(m =>\r\n        <Message id={m.mid} messages={m.message}/>);\r\n\r\n    let addNewMessage = (values) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    if (!props.isAuth) return <Redirect to={\"/login\"}/>;\r\n\r\n    return (\r\n        <div className={css.messageMainPageGridArea}>\r\n\r\n            <div>\r\n                {dialogItemName}\r\n            </div>\r\n            <div>\r\n                {messagesElements}\r\n            </div>\r\n            <div className={css.text}>\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Dialogs;","import React from \"react\"\r\nimport {sendMessageCreator} from \"../../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nlet mapsStateToProps = (state) => {\r\n    return {messagesPage: state.messagesPage}\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody));\r\n        },\r\n    }\r\n}\r\n\r\n//HOC to connect in Compose\r\n\r\nexport default compose (\r\n    connect(mapsStateToProps, mapDispatchToProps),\r\n    withAuthRedirect)(Dialogs);"],"sourceRoot":""}