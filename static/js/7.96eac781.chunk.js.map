{"version":3,"sources":["components/common/FormControls/FormsControls.module.css","components/Profile/MyPosts/MyPosts.module.css","components/common/FormControls/FormsControls.js","utils/validators/validators.js","components/common/FormControls/Forms-redux.js","components/Login/Login.jsx"],"names":["module","exports","FormControl","input","meta","touched","error","children","hasError","className","css","formControl","Textarea","props","restProps","child","Input","required","value","maxLengthCreator","maxLength","length","maxLengthPost","maxLengthMsg","createField","placeholder","name","component","validators","text","Field","validate","AddNewPostFormRedux","reduxForm","form","handleSubmit","onSubmit","button","LoginReduxForm","type","cssForm","formSummaryError","AddMessageFormRedux","connect","state","isAuth","auth","login","to","formData","email","password","rememberMe"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,0C,oBCA3HD,EAAOC,QAAU,CAAC,KAAO,sBAAsB,UAAY,2BAA2B,MAAQ,yB,oJCExFC,EAAc,SAAC,GAA6C,EAA5CC,MAA6C,IAAD,IAArCC,KAAMC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,MAAQC,EAAc,EAAdA,SAC1CC,EAAWH,GAAWC,EAG5B,OACI,yBAAKG,UAAWC,IAAIC,YAAc,KAAOH,EAAWE,IAAIJ,MAAQ,MAC5D,6BACKC,GAEJC,GAAY,8BAAOF,KAYnBM,EAAW,SAACC,GAAW,IACzBV,EAAoCU,EAApCV,MAAuBW,GAAaD,EAA7BT,KAA6BS,EAAvBE,MADW,YACYF,EADZ,2BAE/B,OAAO,kBAACX,EAAgBW,EAAO,8CAAcV,EAAWW,MAG/CE,EAAQ,SAACH,GAAW,IACtBV,EAAoCU,EAApCV,MAAuBW,GAAaD,EAA7BT,KAA6BS,EAAvBE,MADQ,YACeF,EADf,2BAE5B,OAAO,kBAACX,EAAgBW,EAAO,2CAAWV,EAAUW,O,+LC/B3CG,EAAW,SAAAC,GACpB,IAAIA,EACJ,MAAO,qBAGEC,EAAmB,SAACC,GAAD,OAAe,SAACF,GAC5C,GAAIA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,6DCK9BE,EAAgBH,EAAiB,IACjCI,EAAeJ,EAAiB,IAqDvBK,EAAc,SAACC,EAAaC,EAAMC,EAAWC,GAA/B,IAA2Cf,EAA3C,uDAAmD,GAAIgB,EAAvD,uDAA8D,GAA9D,OACvB,iCAAOA,EAAP,IAAa,kBAACC,EAAA,EAAD,eAAOL,YAAaA,EAAaC,KAAMA,EAAMC,UAAWA,EAAWI,SAAUH,GAAgBf,MAGjGmB,EAAsBC,YAAU,CAACC,KAAM,yBAAjBD,EArDZ,SAAC,GAAoB,IAAnBE,EAAkB,EAAlBA,aACrB,OACI,0BAAMC,SAAUD,GACZ,6BACI,kBAACL,EAAA,EAAD,CAAOJ,KAAM,cAAeC,UAAWf,IAChCmB,SAAU,CAACd,EAAUK,MAEhC,6BACI,4BAAQb,UAAWC,IAAI2B,QAAvB,kBA8CHC,EAAiBL,YAAU,CAACC,KAAM,SAAjBD,EAxCZ,SAAC,GAA2B,IAA1BE,EAAyB,EAAzBA,aAAc7B,EAAW,EAAXA,MAC9B,OACI,0BAAM8B,SAAUD,GACXX,EAAY,QAAS,QAASR,IAAO,CAACC,GAAW,GAAI,SACrDO,EAAY,WAAY,WAAYR,IAAO,CAACC,GAAW,CAACsB,KAAM,YAAa,YAC3Ef,EAAY,KAAM,aAAcR,IAAO,KAAM,CAACuB,KAAM,YAAa,eACjEjC,GAAS,yBAAKG,UAAW+B,IAAQC,kBAAmBnC,GACrD,6BACI,0CAEJ,6BACI,2FA8BHoC,EAAsBT,YAAU,CAACC,KAAM,wBAAjBD,EAtBZ,SAAC,GAAoB,IAAnBE,EAAkB,EAAlBA,aACrB,OACI,0BAAMC,SAAUD,GACZ,6BACI,kBAACL,EAAA,EAAD,CAAOH,UAAWf,IAAUc,KAAK,iBAC1BD,YAAY,qBACZM,SAAU,CAACd,EAAUM,MAEhC,6BACI,4BAAQd,UAAWC,IAAI2B,QAAvB,c,uDC1DhB,oEA4BeM,uBAFQ,SAACC,GAAD,MAAU,CAACC,OAAOD,EAAME,KAAKD,UAEZ,CAACE,WAA1BJ,EAlBD,SAAC9B,GAKX,OAAGA,EAAMgC,OACE,kBAAC,IAAD,CAAUG,GAAI,aAGlB,6BACH,kDACA,kBAAC,IAAD,CAAgBZ,SAVH,SAACa,GACdpC,EAAMkC,MAAME,EAASC,MAAOD,EAASE,SAAUF,EAASG","file":"static/js/7.96eac781.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__Xemx7\",\"error\":\"FormsControls_error__4coLq\",\"formSummaryError\":\"FormsControls_formSummaryError__1clvm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"MyPosts_item__2FGtP\",\"postBlock\":\"MyPosts_postBlock__3Tex3\",\"posts\":\"MyPosts_posts__2Wu_O\"};","import React from \"react\";\r\nimport css from \"./FormsControls.module.css\"\r\n\r\nconst FormControl = ({input, meta:{touched, error}, children}) => {\r\n    const hasError = touched && error;\r\n    //Деструктуризируем инпут и пропс,\r\n    //т.к. тут уже нет инпут и пропс\r\n    return (\r\n        <div className={css.formControl + \" \" + (hasError ? css.error : \" \")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\n//REST OPERATOR\r\n// достаём деструктуризацией input & meta\r\n// и оставляем всё оставшееся в пропсах\r\n// Пропсы содержат всё кроме инпута и меты\r\n\r\nexport const Textarea = (props) => {\r\n    const {input, meta, child, ...restProps} = props;\r\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input = (props) => {\r\n    const {input, meta, child, ...restProps} = props;\r\n    return <FormControl {...props}><input {...input}{...restProps}/></FormControl>\r\n}","export const required = value => {\r\n    if (value) return undefined;\r\n    return \"Field is required\"\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value.length > maxLength) return `Max lenght is ${maxLength} symbols `;\r\n    return undefined;\r\n}","import {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport css from \"../../Profile/MyPosts/MyPosts.module.css\";\r\nimport cssForm from \"./FormsControls.module.css\";\r\nimport React from \"react\";\r\nimport {Input, Textarea} from \"./FormsControls\";\r\n\r\n//Валидатор не срабатывает, если он передан непосредственно в тело Field.\r\n// Необходимо обозначить валидатор в файле, как тут\r\n\r\n\r\nlet maxLengthPost = maxLengthCreator(10);\r\nlet maxLengthMsg = maxLengthCreator(20);\r\n\r\n\r\n//------- PROFILE PAGE -------\r\nconst AddNewPostForm = ({handleSubmit}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field name={\"newPostText\"} component={Textarea}\r\n                       validate={[required, maxLengthPost]}/>\r\n            </div>\r\n            <div>\r\n                <button className={css.button}> Add post</button>\r\n            </div>\r\n        </form>)\r\n}\r\n\r\n//------- LOGIN PAGE -------\r\nconst LoginForm = ({handleSubmit, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField(\"Email\", \"email\", Input, [required], \"\", \"Login\")}\r\n            {createField(\"Password\", \"password\", Input, [required], {type: \"password\"}, \"Password\")}\r\n            {createField(null, \"rememberMe\", Input, null, {type: \"checkbox\"}, \"Remember me\")}\r\n            {error && <div className={cssForm.formSummaryError}>{error}</div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n            <div>\r\n                <h1>Test account:\r\n                Email: free@samuraijs.com\r\n                    Password: free</h1>\r\n            </div>\r\n        </form>)\r\n}\r\n\r\n//------- MESSAGE PAGE -------\r\nconst AddMessageForm = ({handleSubmit}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name=\"newMessageBody\"\r\n                       placeholder=\"Enter your message\"\r\n                       validate={[required, maxLengthMsg]}/>\r\n            </div>\r\n            <div>\r\n                <button className={css.button}>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n//Helper - Login Page form\r\nexport const createField = (placeholder, name, component, validators, props = {}, text = \"\") => (\r\n    <div> {text} <Field placeholder={placeholder} name={name} component={component} validate={validators} {...props}/></div>)\r\n\r\n//a unique name for the form\r\nexport const AddNewPostFormRedux = reduxForm({form: \"ProfileAddNewPostForm\"})(AddNewPostForm)\r\nexport const LoginReduxForm = reduxForm({form: \"Login\"})(LoginForm)\r\nexport const AddMessageFormRedux = reduxForm({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n","import React from \"react\";\r\nimport \"./Login.modeule.css\";\r\nimport {LoginReduxForm} from \"../common/FormControls/Forms-redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\n\r\n\r\nconst Login = (props) => {\r\n    const onSubmit = (formData) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe);\r\n    }\r\n\r\n    if(props.isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n\r\n    return <div>\r\n        <h1> Autorization page</h1>\r\n        <LoginReduxForm onSubmit={onSubmit}/>\r\n    </div>\r\n\r\n}\r\n\r\nconst mapStateToProps =(state)=>({isAuth:state.auth.isAuth})\r\n\r\nexport default connect(mapStateToProps, {login})(Login);\r\n"],"sourceRoot":""}